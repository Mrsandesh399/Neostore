{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\n\nconst Validation = callback => {\n  _s();\n\n  const [values, setValues] = useState({});\n  const [errors, setErrors] = useState({});\n  const regForName = /^[a-zA-Z]{2,100}$/;\n  const regForCity = /^[a-zA-Z]{3,100}$/;\n  const regForEmail = RegExp(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\n  const regForPassword = RegExp(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[^a-zA-Z])(?!.*\\s).{8,25}$/);\n  const regforContact = RegExp(/^[0-9]{10}$/);\n  const regforCard = RegExp(/^[0-9]{16}$/);\n  const regforAddress = RegExp(/^[a-zA-Z0-9\\s,./'-]{3,}$/);\n  const regforPincode = RegExp(/^\\d{6}$/);\n\n  const validate = (event, name, value) => {\n    switch (name) {\n      case \"fname\":\n        errors.fname = regForName.test(value) ? \"\" : \"Name must have atleast 2 characters\";\n        break;\n\n      case \"lname\":\n        errors.lname = regForName.test(value) ? \"\" : \"Name must have atleast 2 characters\";\n        break;\n\n      case \"email\":\n        errors.email = regForEmail.test(value) ? \"\" : \"Enter Valid Email\";\n        break;\n\n      case \"mobile\":\n        errors.mobile = regforContact.test(value) ? \"\" : \"Enter valid Contact Number\";\n        break;\n\n      case \"password\":\n        errors.password = regForPassword.test(value) ? \"\" : \"Password must be between 8-25 characters and should contain atleast one lowercase letter, one uppercase letter and one special character\";\n        break;\n\n      case \"cpassword\":\n        errors.cpassword = document.getElementById(\"password\").value === value ? \"\" : \"Password and confirm password should be same\";\n        break;\n\n      case \"address\":\n        errors.address = regforAddress.test(value) ? \"\" : \"Adress must contain minimum 3 characters\";\n        break;\n\n      case \"pincode\":\n        errors.pincode = regforPincode.test(value) ? \"\" : \"Pincode must be 6 digits\";\n        break;\n\n      case \"city\":\n        errors.city = regForCity.test(value) ? \"\" : \"City name must be minimum 3 characters\";\n        break;\n\n      case \"state\":\n        errors.state = regForCity.test(value) ? \"\" : \"State name must be minimum 3 characters\";\n        break;\n\n      case \"country\":\n        errors.country = regForCity.test(value) ? \"\" : \"Country name must be minimum 3 characters\";\n        break;\n\n      case \"card\":\n        errors.card = regforCard.test(value) ? \"\" : \"Card Number Should be 16 digits\";\n        break;\n\n      default:\n        alert(\"Fill proper details\");\n    }\n  };\n\n  const validating_error = errors => {\n    let valid = true;\n    Object.values(errors).forEach(values => values.length > 0 && (valid = false));\n    return valid;\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (validating_error(errors)) {\n      callback();\n    } else {\n      alert(\"There is an error\");\n    }\n  };\n\n  const handler = event => {\n    event.persist();\n    let name = event.target.name;\n    let val = event.target.value;\n    validate(event, name, val);\n    setValues({ ...values,\n      [name]: val\n    });\n  };\n\n  return {\n    values,\n    errors,\n    handler,\n    handleSubmit\n  };\n};\n\n_s(Validation, \"oIbDGYi0uOTpTzOl9U/+/w4jPVs=\");\n\n_c = Validation;\nexport default Validation;\n\nvar _c;\n\n$RefreshReg$(_c, \"Validation\");","map":{"version":3,"sources":["D:/Neostore/clint/src/component/Validation.js"],"names":["React","useState","Validation","callback","values","setValues","errors","setErrors","regForName","regForCity","regForEmail","RegExp","regForPassword","regforContact","regforCard","regforAddress","regforPincode","validate","event","name","value","fname","test","lname","email","mobile","password","cpassword","document","getElementById","address","pincode","city","state","country","card","alert","validating_error","valid","Object","forEach","length","handleSubmit","preventDefault","handler","persist","target","val"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nconst Validation = (callback) => {\r\n    const [values, setValues] = useState({});\r\n    const [errors, setErrors] = useState({});\r\n\r\n    const regForName = /^[a-zA-Z]{2,100}$/;\r\n    const regForCity = /^[a-zA-Z]{3,100}$/;\r\n    const regForEmail = RegExp(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r\n    const regForPassword = RegExp(\r\n        /^(?=.*[a-z])(?=.*[A-Z])(?=.*[^a-zA-Z])(?!.*\\s).{8,25}$/\r\n    );\r\n    const regforContact = RegExp(/^[0-9]{10}$/);\r\n    const regforCard = RegExp(/^[0-9]{16}$/);\r\n    const regforAddress = RegExp(/^[a-zA-Z0-9\\s,./'-]{3,}$/);\r\n    const regforPincode = RegExp(/^\\d{6}$/);\r\n\r\n    const validate = (event, name, value) => {\r\n        switch (name) {\r\n            case \"fname\":\r\n                errors.fname = regForName.test(value)\r\n                    ? \"\"\r\n                    : \"Name must have atleast 2 characters\";\r\n                break;\r\n            case \"lname\":\r\n                errors.lname = regForName.test(value)\r\n                    ? \"\"\r\n                    : \"Name must have atleast 2 characters\";\r\n                break;\r\n            case \"email\":\r\n                errors.email = regForEmail.test(value)\r\n                    ? \"\"\r\n                    : \"Enter Valid Email\";\r\n                break;\r\n            case \"mobile\":\r\n                errors.mobile = regforContact.test(value)\r\n                    ? \"\"\r\n                    : \"Enter valid Contact Number\";\r\n                break;\r\n            case \"password\":\r\n                errors.password = regForPassword.test(value)\r\n                    ? \"\"\r\n                    : \"Password must be between 8-25 characters and should contain atleast one lowercase letter, one uppercase letter and one special character\";\r\n                break;\r\n            case \"cpassword\":\r\n                errors.cpassword =\r\n                    document.getElementById(\"password\").value === value\r\n                        ? \"\"\r\n                        : \"Password and confirm password should be same\";\r\n                break;\r\n            case \"address\":\r\n                errors.address = regforAddress.test(value)\r\n                    ? \"\"\r\n                    : \"Adress must contain minimum 3 characters\";\r\n                break;\r\n            case \"pincode\":\r\n                errors.pincode = regforPincode.test(value)\r\n                    ? \"\"\r\n                    : \"Pincode must be 6 digits\";\r\n                break;\r\n            case \"city\":\r\n                errors.city = regForCity.test(value)\r\n                    ? \"\"\r\n                    : \"City name must be minimum 3 characters\";\r\n                break;\r\n            case \"state\":\r\n                errors.state = regForCity.test(value)\r\n                    ? \"\"\r\n                    : \"State name must be minimum 3 characters\";\r\n                break;\r\n            case \"country\":\r\n                errors.country = regForCity.test(value)\r\n                    ? \"\"\r\n                    : \"Country name must be minimum 3 characters\";\r\n                break;\r\n\r\n            case \"card\":\r\n                errors.card = regforCard.test(value)\r\n                    ? \"\"\r\n                    : \"Card Number Should be 16 digits\";\r\n                break;\r\n\r\n            default:\r\n                alert(\"Fill proper details\");\r\n        }\r\n    };\r\n\r\n    const validating_error = (errors) => {\r\n        let valid = true;\r\n        Object.values(errors).forEach(\r\n            (values) => values.length > 0 && (valid = false)\r\n        );\r\n        return valid;\r\n    };\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (validating_error(errors)) {\r\n            callback();\r\n        } else {\r\n            alert(\"There is an error\");\r\n        }\r\n    };\r\n\r\n    const handler = (event) => {\r\n        event.persist();\r\n\r\n        let name = event.target.name;\r\n        let val = event.target.value;\r\n        validate(event, name, val);\r\n        setValues({\r\n            ...values,\r\n            [name]: val,\r\n        });\r\n    };\r\n\r\n    return {\r\n        values,\r\n        errors,\r\n        handler,\r\n        handleSubmit,\r\n    };\r\n};\r\n\r\nexport default Validation;\r\n"]},"metadata":{},"sourceType":"module"}